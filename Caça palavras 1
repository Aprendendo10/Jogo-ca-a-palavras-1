<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Caça ao Tesouro - Jogo de Níveis</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div id="start-screen">
    <h1>Bem-vindo ao Caça ao Tesouro!</h1>
    <p>Encontre as cartas certas para avançar de nível!</p>
    <button id="start-button">Iniciar Jogo</button>
  </div>

  <div id="game-screen" class="hidden">
    <h1 id="level-title">Nível 1</h1>
    <div id="timer">Tempo restante: <span id="time-left">30</span> segundos</div>
    <div id="grid"></div>
    <p id="message"></p>
    <button id="continue-button" class="hidden">Continuar para o próximo nível</button>
    <button id="retry-button" class="hidden">Tentar Novamente</button>
  </div>

  <footer>
    <p><a href="#">Compartilhe o jogo!</a></p>
  </footer>

  <script src="script.js"></script>
</body>
</html>

body {
  font-family: 'Arial', sans-serif;
  background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
  color: #333;
  text-align: center;
  margin: 0;
  padding: 0;
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

h1 {
  font-size: 32px;
  margin: 20px;
}

button {
  padding: 15px 30px;
  font-size: 20px;
  margin: 10px;
  border-radius: 8px;
  background-color: #6c63ff;
  color: white;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #574b90;
}

#grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  gap: 15px;
  max-width: 800px;
  margin: 20px auto;
}

.square {
  width: 100px;
  height: 100px;
  border-radius: 10px;
  background-color: #f5f5f5;
  border: 2px solid #ccc;
  cursor: pointer;
  transition: transform 0.3s, background-color 0.3s;
}

.square:hover {
  transform: scale(1.1);
}

.correct {
  background-color: #27ae60;
  background-image: url('https://cdn-icons-png.flaticon.com/512/847/847969.png');
  background-size: cover;
}

.miss {
  background-color: #e74c3c;
  background-image: url('https://cdn-icons-png.flaticon.com/512/5948/5948554.png');
  background-size: cover;
}

#timer {
  font-size: 20px;
  margin: 10px;
}

.hidden {
  display: none;
}

const startButton = document.getElementById("start-button");
const gameScreen = document.getElementById("game-screen");
const startScreen = document.getElementById("start-screen");
const grid = document.getElementById("grid");
const message = document.getElementById("message");
const levelTitle = document.getElementById("level-title");
const continueButton = document.getElementById("continue-button");
const retryButton = document.getElementById("retry-button");
const timerDisplay = document.getElementById("time-left");

let level = 1;
let attempts = 0;
let correctClicks = 0;
let requiredCorrectClicks;
let timeLeft = 30;
let timer;

// Função para iniciar o jogo
function startGame() {
  level = 1;
  startScreen.classList.add("hidden");
  gameScreen.classList.remove("hidden");
  setupLevel();
}

// Função para configurar o nível
function setupLevel() {
  correctClicks = 0;
  requiredCorrectClicks = level;
  attempts = 0;
  timeLeft = 30;
  message.textContent = "";
  continueButton.classList.add("hidden");
  retryButton.classList.add("hidden");
  levelTitle.textContent = `Nível ${level}`;
  startTimer();
  createGrid();
}

// Função para criar o tabuleiro de cartas
function createGrid() {
  grid.innerHTML = "";
  const totalSquares = Math.max(5, level + 3) ** 2;

  const correctPositions = new Set();
  while (correctPositions.size < requiredCorrectClicks) {
    correctPositions.add(Math.floor(Math.random() * totalSquares));
  }

  for (let i = 0; i < totalSquares; i++) {
    const square = document.createElement("div");
    square.classList.add("square");
    square.dataset.correct = correctPositions.has(i);

    square.addEventListener("click", handleSquareClick);
    grid.appendChild(square);
  }
}

// Função para lidar com cliques nas cartas
function handleSquareClick(event) {
  const square = event.target;
  const isCorrect = square.dataset.correct === "true";

  if (isCorrect) {
    square.classList.add("correct");
    correctClicks++;
    if (correctClicks >= requiredCorrectClicks) {
      message.textContent = "Parabéns! Você passou de nível.";
      continueButton.classList.remove("hidden");
      clearInterval(timer);
    }
  } else {
    square.classList.add("miss");
    attempts++;
    if (attempts >= 2) {
      message.textContent = "Você errou demais! Voltou um nível.";
      level = Math.max(1, level - 1);
      retryButton.classList.remove("hidden");
      clearInterval(timer);
    }
  }
  square.removeEventListener("click", handleSquareClick);
}

// Função para iniciar o cronômetro
function startTimer() {
  timer = setInterval(() => {
    timeLeft--;
    timerDisplay.textContent = timeLeft;
    if (timeLeft <= 0) {
      message.textContent = "Tempo esgotado! Tente novamente.";
      retryButton.classList.remove("hidden");
      clearInterval(timer);
    }
  }, 1000);
}

// Eventos dos botões
continueButton.addEventListener("click", () => {
  level++;
  setupLevel();
});

retryButton.addEventListener("click", setupLevel);
startButton.addEventListener("click", startGame);
